Create a new Terraform file called main.tf.
Create three variables.
The first variable, called image_name, needs to be set to ghost:latest.
The second variable is called container_name with a default of ghost_blog.
The final variable is called ext_port and set the default to port 80.

Create a Docker image resource called ghost_image that uses the image_name variable.

Create a Docker container resource called ghost_container.
The name will use the container_name variable.
The image will use the ghost_image resource.
The internal port will be set to 2368.
The external port will use ext_port variable.

Initialize Terraform.

Create a Terraform plan that uses the following variables:

container_name = ghost_blog1
image_name = ghost:alpine
ext_port = 8080
Output the plan to a file called tfplan.

Then apply the plan using tfplan and make sure that the apply doesnâ€™t prompt for input.
=================================================================================
nano main.tf


resource "docker_image" "ghost_image" {
  name = "${var.image_name}"
}


resource "docker_container" "ghost_container" {
  name  = "${var.container_name}"
  image = "${docker_image.ghost_image.latest}"
  ports {
    internal = "2368"
    external = "${var.ext_port}"
  }
}

nano variables.tf

variable "image_name" {
default= "ghost:alpine"
}


variable "container_name" {
default= "ghost_blog1"
}


variable "ext_port" {
default= "8080"
}

$ terraform init

Initializing provider plugins...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.docker: version = "~> 2.7"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
$ terraform plan -out tfplan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  + docker_container.ghost_container
      id:               <computed>
      attach:           "false"
      bridge:           <computed>
      command.#:        <computed>
      container_logs:   <computed>
      entrypoint.#:     <computed>
      env.#:            <computed>
      exit_code:        <computed>
      gateway:          <computed>
      hostname:         <computed>
      image:            "${docker_image.ghost_image.latest}"
      ip_address:       <computed>
      ip_prefix_length: <computed>
      ipc_mode:         <computed>
      labels.#:         <computed>
      log_driver:       "json-file"
      logs:             "false"
      must_run:         "true"
      name:             "ghost_blog1"
      network_data.#:   <computed>
      ports.#:          "1"
      ports.0.external: "8080"
      ports.0.internal: "2368"
      ports.0.ip:       "0.0.0.0"
      ports.0.protocol: "tcp"
      read_only:        "false"
      restart:          "no"
      rm:               "false"
      shm_size:         <computed>
      start:            "true"

  + docker_image.ghost_image
      id:               <computed>
      latest:           <computed>
      name:             "ghost:alpine"


Plan: 2 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"

$ terraform apply "tfplan"
docker_image.ghost_image: Creating...
  latest: "" => "<computed>"
  name:   "" => "ghost:alpine"
docker_image.ghost_image: Still creating... (10s elapsed)
docker_image.ghost_image: Still creating... (20s elapsed)
docker_image.ghost_image: Creation complete after 24s (ID: sha256:efff227b432c56c211f158921448d6dc...1b6d1da98ead96416012844e9dghost:alpine)
docker_container.ghost_container: Creating...
  attach:           "" => "false"
  bridge:           "" => "<computed>"
  command.#:        "" => "<computed>"
  container_logs:   "" => "<computed>"
  entrypoint.#:     "" => "<computed>"
  env.#:            "" => "<computed>"
  exit_code:        "" => "<computed>"
  gateway:          "" => "<computed>"
  hostname:         "" => "<computed>"
  image:            "" => "sha256:efff227b432c56c211f158921448d6dcbd89f41b6d1da98ead96416012844e9d"
  ip_address:       "" => "<computed>"
  ip_prefix_length: "" => "<computed>"
  ipc_mode:         "" => "<computed>"
  labels.#:         "" => "<computed>"
  log_driver:       "" => "json-file"
  logs:             "" => "false"
  must_run:         "" => "true"
  name:             "" => "ghost_blog1"
  network_data.#:   "" => "<computed>"
  ports.#:          "" => "1"
  ports.0.external: "" => "8080"
  ports.0.internal: "" => "2368"
  ports.0.ip:       "" => "0.0.0.0"
  ports.0.protocol: "" => "tcp"
  read_only:        "" => "false"
  restart:          "" => "no"
  rm:               "" => "false"
  shm_size:         "" => "<computed>"
  start:            "" => "true"
docker_container.ghost_container: Creation complete after 1s (ID: 03638d93bbf2462dc8042086a8d8f16df117fd1edc31662f5c13be1449eebfee)

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
