Create a file called main.tf.
Create a docker image resource and call it nginx_image.
Set the name of the image to nginx:latest.
Save and exit the file.

Initialize Terraform.
Plan the deploy and output a terraform plan called tf_image_plan.
Apply the plan using tf_image_plan.
******************************************************************************************************************
docker-machine ssh manager
   ( '>')
  /) TC (\   Core is distributed with ABSOLUTELY NO WARRANTY.
 (/-_--_-\)           www.tinycorelinux.net

docker@manager:~$ docker swarm init
Error response from daemon: could not choose an IP address to advertise since this system has multiple addresses on different interfaces (10.0.2.15 on eth0 and 192.168.99.101 on eth1) - specify one with --advertise-addr
docker@manager:~$ docker swarm init --advertise-addr 192.168.99.101
Swarm initialized: current node (mmqitiggy71kqbdxm77r1odcs) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-4ou6hdc2chxfyshfrw9qf42duql9qiau9ng46n7knp66947tre-1st3gdqhg1fphgq6w4o69y8a9 192.168.99.101:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

docker@manager:~$ docker node ls
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
mmqitiggy71kqbdxm77r1odcs *   manager             Ready               Active              Leader              19.03.5
10osiaboer3v5z2xp3joykwjl     worker              Ready               Active                                  19.03.5
---------------------------------

HP@LAPTOP-HR36TFDC MINGW64 ~
$ terraform version
Terraform v0.12.28

HP@LAPTOP-HR36TFDC MINGW64 ~
$ nano main.tf
main.tf
resource "docker_image" "nginx_image"{
name = "nginx:latest"
}

HP@LAPTOP-HR36TFDC MINGW64 ~
$ terraform init

Initializing the backend...

Initializing provider plugins...
- Checking for available provider plugins...
- Downloading plugin for provider "docker" (terraform-providers/docker) 2.7.1...


The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.docker: version = "~> 2.7"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

HP@LAPTOP-HR36TFDC MINGW64 ~
$ terraform plan out tfimageplan
Too many command line arguments. Configuration path expected.

HP@LAPTOP-HR36TFDC MINGW64 ~
$ terraform plan -out tfimageplan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_image.nginx_image will be created
  + resource "docker_image" "nginx_image" {
      + id     = (known after apply)
      + latest = (known after apply)
      + name   = "nginx:latest"
    }

Plan: 1 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: tfimageplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfimageplan"


HP@LAPTOP-HR36TFDC MINGW64 ~
$ terraform apply tfimageplan
docker_image.nginx_image: Creating...
docker_image.nginx_image: Still creating... [10s elapsed]
docker_image.nginx_image: Still creating... [20s elapsed]
docker_image.nginx_image: Still creating... [30s elapsed]
docker_image.nginx_image: Creation complete after 34s [id=sha256:2622e6cca7ebbb6
e310743abce3fc47335393e79171b9d76ba9d4f446ce7b163nginx:latest]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: terraform.tfstate


